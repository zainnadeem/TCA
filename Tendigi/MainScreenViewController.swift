//
//  MainScreenViewController.swift
//  Tendigi
//
//  Created by Zain N. on 11/15/18.
//  Copyright (c) 2018 Mapfit. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainScreenDisplayLogic: class
{
    func fetchJSONInformation()
    func displayInformation(viewModel: MainScreen.Data.ViewModel)
}

class MainScreenViewController: UIViewController, MainScreenDisplayLogic {

var interactor: MainScreenBusinessLogic?
var router: (NSObjectProtocol & MainScreenRoutingLogic & MainScreenDataPassing)?
lazy var tweets: [Tweet] = [Tweet]()
lazy var tweetTableView: UITableView = UITableView()
    lazy var resuseID: String = "tweetTableViewCell"
// MARK: Object lifecycle

override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
{
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
}

required init?(coder aDecoder: NSCoder)
{
    super.init(coder: aDecoder)
    setup()
}

// MARK: Setup

private func setup()
{
    let viewController = self
    let interactor = MainScreenInteractor()
    let presenter = MainScreenPresenter()
    let router = MainScreenRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
}

// MARK: Do something

//@IBOutlet weak var nameTextField: UITextField!

override func viewDidLoad() {
    self.tweetTableView.delegate = self
    self.tweetTableView.dataSource = self
    self.setConstraints()
    
    DispatchQueue.global(qos: .background).async {
        self.fetchJSONInformation()
    }
}


func fetchJSONInformation() {
    interactor?.fetchJSON()
}



func displayInformation(viewModel: MainScreen.Data.ViewModel)
{
    if let modelTweets = viewModel.formattedTweets {
        tweets = modelTweets
        DispatchQueue.main.async {
             self.tweetTableView.reloadData()
        }
    }

    
}
    
    func setConstraints(){
        
        self.tweetTableView.translatesAutoresizingMaskIntoConstraints = false
        self.view.addSubview(tweetTableView)
        self.tweetTableView.centerXAnchor.constraint(equalTo: self.view.centerXAnchor).isActive = true
        self.tweetTableView.centerYAnchor.constraint(equalTo: self.view.centerYAnchor).isActive = true
        self.tweetTableView.widthAnchor.constraint(equalTo: self.view.widthAnchor).isActive = true
        self.tweetTableView.heightAnchor.constraint(equalTo: self.view.heightAnchor).isActive = true
        
    }
    
    
    
    
}




extension MainScreenViewController: UITableViewDataSource, UITableViewDelegate {
        
        func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
            return tweets.count
        }
        
        func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
            var cell = tableView.dequeueReusableCell(withIdentifier: resuseID)
            if cell == nil {
                cell = UITableViewCell(style: .subtitle, reuseIdentifier: resuseID)
                
            }
            cell?.textLabel?.text = tweets[indexPath.row].text
            cell?.textLabel?.font = UIFont.systemFont(ofSize: 11)
            cell?.textLabel?.numberOfLines = 2
            cell?.detailTextLabel?.text =  tweets[indexPath.row].createdAt
            cell?.detailTextLabel?.font = UIFont.boldSystemFont(ofSize: 8)
            cell?.detailTextLabel?.textColor = .darkGray
            return cell!
            
            
        }
        
        func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
            
        }
}
